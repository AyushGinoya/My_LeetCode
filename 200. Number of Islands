class Solution {
private:
    void bfs(int row,int col,vector<vector<char>>& grid,vector<vector<int>> &vis)
    {
        vis[row][col]=1;
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>> q;
        q.push({row,col});

        while(!q.empty())
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();

            //cheack  horizontally or vertically 

            int checkRow[] = {-1, 0, 1, 0};
            int checkCol[] = {0, 1, 0, -1};

            for (int i = 0; i < 4; i++) 
            {
                int newRow = r + checkRow[i];
                int newCol = c + checkCol[i];

                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && 
                !vis[newRow][newCol] && grid[newRow][newCol] == '1')
                {
                    vis[newRow][newCol] = 1;
                    q.push({newRow, newCol});
                }
            }
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
       vector<vector<int>> vis(n, vector<int>(m, 0));;
        int ans=0;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]=='1')
                {
                    bfs(i,j,grid,vis);
                    ans++;
                }
            }
        }
        return ans;
    }
};
