class Solution {
private:
    bool check(int node, int col, vector<int> adj[], vector<int>& vis) {
        vis[node] = col;

        for (auto child : adj[node]) {
            if (vis[child] == -1) {
                if (check(child, !col, adj, vis) == false) {
                    return false;
                }
            } else if (col == vis[child]) {
                return false;
            }
        }
        return true;
    }

public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> adj[graph.size()];

        for (int i = 0; i < graph.size(); i++) {
            for (int j = 0; j < graph[i].size(); j++) {
                adj[i].push_back(graph[i][j]);
            }
        }

        vector<int> vis(graph.size(), -1);
        for (int i = 0; i < graph.size(); i++) {
            if (vis[i] == -1) {
                if (check(i, 0, adj, vis) == false) {
                    return false;
                }
            }
        }

        return true;
    }
};
