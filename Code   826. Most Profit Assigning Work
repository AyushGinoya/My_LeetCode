using p = pair<int, int>;
class Solution {
public:
    int BS(vector<int>& difficulty, int element) {
        int s = 0;
        int e = difficulty.size() - 1;
        int res = -1;

        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (difficulty[mid] <= element) {
                res = mid;
                s = mid + 1;
            } else {
                e = mid - 1;
            }
        }

        return res;
    }

    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit,
                            vector<int>& worker) {
        int ans = 0;
        priority_queue<p, vector<p>, greater<p>> hp;

        int n = difficulty.size();

        for (int i = 0; i < n; i++) {
            hp.push({difficulty[i], profit[i]});
        }

        priority_queue<p, vector<p>, greater<p>> temp = hp;
        vector<int> diff;
        vector<int> maxProfit(n, 0);
        int currentMaxProfit = 0;
        int j = 0;

        while (temp.size() > 0) {
            diff.push_back(temp.top().first);
            // cout << temp.top().first << " ";
            temp.pop();
        }

        for (int i = 0; i < n; ++i) {
            while (j < n && hp.top().first == diff[i]) {
                currentMaxProfit = max(currentMaxProfit, hp.top().second);
                hp.pop();
                ++j;
            }
            maxProfit[i] = currentMaxProfit;
        }

        for (int i = 0; i < worker.size(); i++) {
            int index = BS(diff, worker[i]);
            if (index >= 0) {

                ans += maxProfit[index];
            }
        }
        // cout << endl;

        // for (int i = 0; i < worker.size(); i++) {
        //     cout << worker[i] << " ";
        // }

        return ans;
    }
};
