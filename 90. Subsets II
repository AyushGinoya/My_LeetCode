class Solution {
public:
    void allsubsequence(vector<int>& nums, vector<int>& temp, int i, int n, set<vector<int>>& s) {
        if (i >= n) {
            s.insert(temp);
            return;
        }
        // Include the current element
        temp.push_back(nums[i]);
        allsubsequence(nums, temp, i + 1, n, s);
        // Exclude the current element
        temp.pop_back();
        allsubsequence(nums, temp, i + 1, n, s);
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int> temp;
        set<vector<int>> s;
        int n = nums.size();
        sort(nums.begin(),nums.end());

        allsubsequence(nums, temp, 0, n, s);
        vector<vector<int>> ans(s.begin(), s.end());

        return ans;
    }
};
