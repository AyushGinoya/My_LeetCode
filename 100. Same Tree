/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*

    // method 1

    void preorder(vector<int> &v1,TreeNode* p)
    {
        if(p==NULL)
        {
            v1.push_back(0);
            return;
        }
        
        v1.push_back(p->val);
        preorder(v1,p->right);
        preorder(v1,p->left);
    }

    void preorder1(vector<int> &v2,TreeNode* q)
    {
        if(q==NULL)
        {
            v2.push_back(0);
            return;
        }
        
        v2.push_back(q->val);
        preorder(v2,q->right);
        preorder(v2,q->left);
    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        vector<int> v1,v2;
        if(p==NULL && q!=NULL)
        return false;

        if(p!=NULL && q==NULL)
        return false;

        preorder(v1,p);
        preorder(v2,q);
        bool f=true;
        for(int i=0;i<v1.size();i++)
        {
            if(v1[i]!=v2[i])
            return false;
            continue;
        }
        return f;
    }
    */

    // method 2

    
    bool isSameTree(TreeNode* p, TreeNode* q)
    {
        if(p==NULL && q==NULL)
        {
            return true;
        }
        if(p==NULL || q==NULL)
        {
            return false;
        }

        return (p->val==q->val && isSameTree(p->right,q->right) &&isSameTree(p->left,q->left)); 
    }
};
